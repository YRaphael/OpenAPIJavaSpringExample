/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-beta).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package example.university.api;

import java.util.List;
import example.university.model.StandardError;
import example.university.model.Teacher;
import example.university.model.ValidationError;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "TeachersController", description = "the TeachersController API")
public interface TeachersControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/teachers : Create or update teachers from query
     *
     * @param teacher requestBody (required)
     * @return Teachers created (status code 201)
     *         or Validation error (status code 400)
     *         or Unexpected error (status code 500)
     */
    @ApiOperation(value = "Create or update teachers from query", nickname = "createTeachersUsingPOST", notes = "", response = Teacher.class, tags={ "teachers-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Teachers created", response = Teacher.class),
        @ApiResponse(code = 400, message = "Validation error", response = ValidationError.class),
        @ApiResponse(code = 500, message = "Unexpected error", response = StandardError.class) })
    @RequestMapping(value = "/api/teachers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Teacher> createTeachersUsingPOST(@ApiParam(value = "requestBody" ,required=true )  @Valid @RequestBody List<Teacher> teacher) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"surname\" : { \"value\" : \"Johnson\" }, \"internalDatabaseId\" : \"\", \"name\" : { \"value\" : \"Alex\" }, \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/teachers : Get all teachers
     *
     * @param groupNumber  (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get all teachers", nickname = "getAllTeachersUsingGET", notes = "", response = Teacher.class, responseContainer = "List", tags={ "teachers-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Teacher.class, responseContainer = "List") })
    @RequestMapping(value = "/api/teachers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Teacher>> getAllTeachersUsingGET(@NotNull @ApiParam(value = "", required = true, defaultValue = "null") @Valid @RequestParam(value = "group_number", required = true, defaultValue="null") String groupNumber) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"surname\" : { \"value\" : \"Johnson\" }, \"internalDatabaseId\" : \"\", \"name\" : { \"value\" : \"Alex\" }, \"id\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
